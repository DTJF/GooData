<STRUCT>
<NAME>GooPie2d</NAME>
struct _GooPie2d{
 GooCanvasGroup parent_instance;
 GooCanvasItem* Parent, PSegm, PLabl;
 gchar* Chan, Form, Gaps, PSeg;
 GooDataPoints* Dat;
 GooFiller* GoFi;
 GooType Bx, By, Bb, Bh;
};
</STRUCT>
<STRUCT>
<NAME>GooPie2dClass</NAME>
struct _GooPie2dClass{
 GooCanvasGroupClass parent_class;
};
</STRUCT>
<MACRO>
<NAME>GOO_TYPE_PIE2D</NAME>
#define GOO_TYPE_PIE2D (_goo_pie2d_get_type())
</MACRO>
<MACRO>
<NAME>GOO_PIE2D</NAME>
#define GOO_PIE2D(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GOO_TYPE_PIE2D, GooPie2d))
</MACRO>
<MACRO>
<NAME>GOO_IS_PIE2D</NAME>
#define GOO_IS_PIE2D(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GOO_TYPE_PIE2D))
</MACRO>
<MACRO>
<NAME>GOO_PIE2D_CLASS</NAME>
#define GOO_PIE2D_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST((klass), GOO_TYPE_PIE2D, GooPie2dClass))
</MACRO>
<MACRO>
<NAME>GOO_IS_PIE2D_CLASS</NAME>
#define GOO_IS_PIE2D_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE((klass), GOO_TYPE_PIE2D))
</MACRO>
<MACRO>
<NAME>GOO_PIE2D_GET_CLASS</NAME>
#define GOO_PIE2D_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GOO_TYPE_PIE2D, GooPie2dClass))
</MACRO>
<FUNCTION>
<NAME>goo_pie2d_new</NAME>
<RETURNS>GooPie2d * </RETURNS>
GooCanvasItem* Parent, GooDataPoints* Dat, GooType X, GooType Y, GooType Width_, GooType Height, ... 
</FUNCTION>
<ENUM>
<NAME>GooAxisType</NAME>
typedef enum {
  GOO_AXIS_WEST,
  GOO_AXIS_SOUTH,
  GOO_AXIS_EAST,
  GOO_AXIS_NORTH,
  GOO_GRIDAXIS_WEST,
  GOO_GRIDAXIS_SOUTH,
  GOO_GRIDAXIS_EAST,
  GOO_GRIDAXIS_NORTH,
} GooAxisType;
</ENUM>
<STRUCT>
<NAME>GooAxis</NAME>
struct _GooAxis{
 GooCanvasGroup parent_instance;
 GooType Pos(GooType V);
  void Geo(GooType* S, GooType* L);
 GooAxisType Mo;
 GooCanvasItem* Parent, Back;
 GooCanvasItem* Textgr, Label, Ticktext;
 GooCanvasItem* Bline, Grid, Tick, STick;
 gchar* TLen, TVal, Text, Borders, Form ;
', Offset
 guint Tsub, TextAlign;
 char TickLabels;
 GooType Smin, Smax, Basis;
 GooType Angle, TickOffs, TextOffs;
 GooType Alen, TickHeight, Tin, Tout;
 GooType Along, Across, X1, Y1, X2, Y2;
 GooType Voffs, VScale, POffs;
 GooType Bx, By, Bb, Bh;
 GooType eps;
 guint PoMo;
};
</STRUCT>
<STRUCT>
<NAME>GooAxisClass</NAME>
struct _GooAxisClass{
 GooCanvasGroupClass parent_class;
};
</STRUCT>
<MACRO>
<NAME>GOO_TYPE_AXIS</NAME>
#define GOO_TYPE_AXIS (_goo_axis_get_type())
</MACRO>
<MACRO>
<NAME>GOO_AXIS</NAME>
#define GOO_AXIS(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GOO_TYPE_AXIS, GooAxis))
</MACRO>
<MACRO>
<NAME>GOO_IS_AXIS</NAME>
#define GOO_IS_AXIS(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GOO_TYPE_AXIS))
</MACRO>
<MACRO>
<NAME>GOO_AXIS_CLASS</NAME>
#define GOO_AXIS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST((klass), GOO_TYPE_AXIS, GooAxisClass))
</MACRO>
<MACRO>
<NAME>GOO_IS_AXIS_CLASS</NAME>
#define GOO_IS_AXIS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE((klass), GOO_TYPE_AXIS))
</MACRO>
<MACRO>
<NAME>GOO_AXIS_GET_CLASS</NAME>
#define GOO_AXIS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GOO_TYPE_AXIS, GooAxisClass))
</MACRO>
<FUNCTION>
<NAME>goo_axis_new</NAME>
<RETURNS>GooAxis * </RETURNS>
GooCanvasItem* Parent, GooCanvasItem* Back, GooAxisType Modus, gchar* Text, ... 
</FUNCTION>
<FUNCTION>
<NAME>goo_axis_get_text_properties</NAME>
<RETURNS>void  </RETURNS>
GooAxis* Axis, ... 
</FUNCTION>
<FUNCTION>
<NAME>goo_axis_set_text_properties</NAME>
<RETURNS>void  </RETURNS>
GooAxis* Axis, ... 
</FUNCTION>
<FUNCTION>
<NAME>goo_axis_get_grid_properties</NAME>
<RETURNS>void  </RETURNS>
GooAxis* Axis, ... 
</FUNCTION>
<FUNCTION>
<NAME>goo_axis_set_grid_properties</NAME>
<RETURNS>void  </RETURNS>
GooAxis* Axis, ... 
</FUNCTION>
<FUNCTION>
<NAME>goo_axis_get_ticks_properties</NAME>
<RETURNS>void  </RETURNS>
GooAxis* Axis, ... 
</FUNCTION>
<FUNCTION>
<NAME>goo_axis_set_ticks_properties</NAME>
<RETURNS>void  </RETURNS>
GooAxis* Axis, ... 
</FUNCTION>
<FUNCTION>
<NAME>goo_axis_get_subticks_properties</NAME>
<RETURNS>void  </RETURNS>
GooAxis* Axis, ... 
</FUNCTION>
<FUNCTION>
<NAME>goo_axis_set_subticks_properties</NAME>
<RETURNS>void  </RETURNS>
GooAxis* Axis, ... 
</FUNCTION>
<STRUCT>
<NAME>GooBox2d</NAME>
struct _GooBox2d{
 GooCanvasGroup parent_instance;
 GooCanvasItem* Parent, PBox, PWis, POut;
 GooAxis* Axis;
 GooDataPoints* Dat;
 gchar* Chan, Boxs, Outl;
 guint Vertical;
 gdouble Bx, By, Bb, Bh;
};
</STRUCT>
<STRUCT>
<NAME>GooBox2dClass</NAME>
struct _GooBox2dClass{
 GooCanvasGroupClass parent_class;
};
</STRUCT>
<MACRO>
<NAME>GOO_TYPE_BOX2D</NAME>
#define GOO_TYPE_BOX2D (_goo_box2d_get_type())
</MACRO>
<MACRO>
<NAME>GOO_BOX2D</NAME>
#define GOO_BOX2D(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GOO_TYPE_BOX2D, GooBox2d))
</MACRO>
<MACRO>
<NAME>GOO_IS_BOX2D</NAME>
#define GOO_IS_BOX2D(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GOO_TYPE_BOX2D))
</MACRO>
<MACRO>
<NAME>GOO_BOX2D_CLASS</NAME>
#define GOO_BOX2D_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST((klass), GOO_TYPE_BOX2D, GooBox2dClass))
</MACRO>
<MACRO>
<NAME>GOO_IS_BOX2D_CLASS</NAME>
#define GOO_IS_BOX2D_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE((klass), GOO_TYPE_BOX2D))
</MACRO>
<MACRO>
<NAME>GOO_BOX2D_GET_CLASS</NAME>
#define GOO_BOX2D_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GOO_TYPE_BOX2D, GooBox2dClass))
</MACRO>
<FUNCTION>
<NAME>goo_box2d_get_whiskers_properties</NAME>
<RETURNS>void  </RETURNS>
GooBox2d* Box2d, ... 
</FUNCTION>
<FUNCTION>
<NAME>goo_box2d_set_whiskers_properties</NAME>
<RETURNS>void  </RETURNS>
GooBox2d* Box2d, ... 
</FUNCTION>
<FUNCTION>
<NAME>goo_box2d_get_outliers_properties</NAME>
<RETURNS>void  </RETURNS>
GooBox2d* Box2d, ... 
</FUNCTION>
<FUNCTION>
<NAME>goo_box2d_set_outliers_properties</NAME>
<RETURNS>void  </RETURNS>
GooBox2d* Box2d, ... 
</FUNCTION>
<FUNCTION>
<NAME>goo_box2d_new</NAME>
<RETURNS>GooBox2d * </RETURNS>
GooCanvasItem* Parent, GooAxis* Axis, GooDataPoints* Dat, ... 
</FUNCTION>
<STRUCT>
<NAME>GooBar2d</NAME>
struct _GooBar2d{
 GooCanvasGroup parent_instance;
 GooCanvasItem* Parent, BSegm, BLabl;
 GooAxis* Axis;
 GooDataPoints* Dat;
 GooFiller* GoFi;
 gchar* Chan, Gaps;
 guint Alph, Vertical;
 gdouble Bx, By, Bb, Bh;
};
</STRUCT>
<STRUCT>
<NAME>GooBar2dClass</NAME>
struct _GooBar2dClass{
 GooCanvasGroupClass parent_class;
};
</STRUCT>
<MACRO>
<NAME>GOO_TYPE_BAR2D</NAME>
#define GOO_TYPE_BAR2D (_goo_bar2d_get_type())
</MACRO>
<MACRO>
<NAME>GOO_BAR2D</NAME>
#define GOO_BAR2D(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GOO_TYPE_BAR2D, GooBar2d))
</MACRO>
<MACRO>
<NAME>GOO_IS_BAR2D</NAME>
#define GOO_IS_BAR2D(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GOO_TYPE_BAR2D))
</MACRO>
<MACRO>
<NAME>GOO_BAR2D_CLASS</NAME>
#define GOO_BAR2D_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST((klass), GOO_TYPE_BAR2D, GooBar2dClass))
</MACRO>
<MACRO>
<NAME>GOO_IS_BAR2D_CLASS</NAME>
#define GOO_IS_BAR2D_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE((klass), GOO_TYPE_BAR2D))
</MACRO>
<MACRO>
<NAME>GOO_BAR2D_GET_CLASS</NAME>
#define GOO_BAR2D_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GOO_TYPE_BAR2D, GooBar2dClass))
</MACRO>
<FUNCTION>
<NAME>goo_bar2d_new</NAME>
<RETURNS>GooBar2d * </RETURNS>
GooCanvasItem* Parent, GooAxis* Axis, GooDataPoints* Dat, ... 
</FUNCTION>
<STRUCT>
<NAME>GooCurve2d</NAME>
struct _GooCurve2d{
 GooCanvasGroup parent_instance;
 GooCanvasItem* Parent, MItem;
 GooCanvasItem* CLine, CArea, CErrs, CPerp, CMark, CVect;
 GooAxis* AxisX, AxisY;
 GooDataPoints* Dat;
 gchar* LTyp, ATyp, ADir, Chan, Pers, Erro, Vect, Mark;
 gint ChX, ChY, MType;
 gdouble Bx, By, Bb, Bh, MScal;
};
</STRUCT>
<STRUCT>
<NAME>GooCurve2dClass</NAME>
struct _GooCurve2dClass{
 GooCanvasGroupClass parent_class;
};
</STRUCT>
<MACRO>
<NAME>GOO_TYPE_CURVE2D</NAME>
#define GOO_TYPE_CURVE2D (_goo_curve2d_get_type ())
</MACRO>
<MACRO>
<NAME>GOO_CURVE2D</NAME>
#define GOO_CURVE2D(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GOO_TYPE_CURVE2D, GooCurve2d))
</MACRO>
<MACRO>
<NAME>GOO_IS_CURVE2D</NAME>
#define GOO_IS_CURVE2D(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GOO_TYPE_CURVE2D))
</MACRO>
<MACRO>
<NAME>GOO_CURVE2D_CLASS</NAME>
#define GOO_CURVE2D_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GOO_TYPE_CURVE2D, GooCurve2dClass))
</MACRO>
<MACRO>
<NAME>GOO_IS_CURVE2D_CLASS</NAME>
#define GOO_IS_CURVE2D_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GOO_TYPE_CURVE2D))
</MACRO>
<MACRO>
<NAME>GOO_CURVE2D_GET_CLASS</NAME>
#define GOO_CURVE2D_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GOO_TYPE_CURVE2D, GooCurve2dClass))
</MACRO>
<FUNCTION>
<NAME>goo_curve2d_get_area_properties</NAME>
<RETURNS>void  </RETURNS>
GooCurve2d* Curve2d, ... 
</FUNCTION>
<FUNCTION>
<NAME>goo_curve2d_set_area_properties</NAME>
<RETURNS>void  </RETURNS>
GooCurve2d* Curve2d, ... 
</FUNCTION>
<FUNCTION>
<NAME>goo_curve2d_get_perpens_properties</NAME>
<RETURNS>void  </RETURNS>
GooCurve2d* Curve2d, ... 
</FUNCTION>
<FUNCTION>
<NAME>goo_curve2d_set_perpens_properties</NAME>
<RETURNS>void  </RETURNS>
GooCurve2d* Curve2d, ... 
</FUNCTION>
<FUNCTION>
<NAME>goo_curve2d_get_errors_properties</NAME>
<RETURNS>void  </RETURNS>
GooCurve2d* Curve2d, ... 
</FUNCTION>
<FUNCTION>
<NAME>goo_curve2d_set_errors_properties</NAME>
<RETURNS>void  </RETURNS>
GooCurve2d* Curve2d, ... 
</FUNCTION>
<FUNCTION>
<NAME>goo_curve2d_get_markers_properties</NAME>
<RETURNS>void  </RETURNS>
GooCurve2d* Curve2d, ... 
</FUNCTION>
<FUNCTION>
<NAME>goo_curve2d_set_markers_properties</NAME>
<RETURNS>void  </RETURNS>
GooCurve2d* Curve2d, ... 
</FUNCTION>
<FUNCTION>
<NAME>goo_curve2d_get_vectors_properties</NAME>
<RETURNS>void  </RETURNS>
GooCurve2d* Curve2d, ... 
</FUNCTION>
<FUNCTION>
<NAME>goo_curve2d_set_vectors_properties</NAME>
<RETURNS>void  </RETURNS>
GooCurve2d* Curve2d, ... 
</FUNCTION>
<FUNCTION>
<NAME>goo_curve2d_new</NAME>
<RETURNS>GooCurve2d * </RETURNS>
GooCanvasItem* Parent, GooAxis* AxisX, GooAxis* AxisY, GooDataPoints* Dat, ... 
</FUNCTION>
<MACRO>
<NAME>GOO_EPS</NAME>
#define GOO_EPS (1e-7)
</MACRO>
<ENUM>
<NAME>GooDataMarkers</NAME>
typedef enum {
  GOO_MARKER_NONE,
  GOO_MARKER_CIRCLE,
  GOO_MARKER_CROSS,
  GOO_MARKER_CROSS2,
  GOO_MARKER_TRIANGLE,
  GOO_MARKER_TRIANGLE2,
  GOO_MARKER_RHOMBUS,
  GOO_MARKER_RHOMBUS2,
  GOO_MARKER_RHOMBUS3,
  GOO_MARKER_SQUARE,
  GOO_MARKER_FLOWER1,
  GOO_MARKER_FLOWER2,
} GooDataMarkers;
</ENUM>
<FUNCTION>
<NAME>goo_set_decimal_separator</NAME>
<RETURNS>unsigned char  </RETURNS>
UByte V 
</FUNCTION>
<STRUCT>
<NAME>GooDataPoints</NAME>
struct _GooDataPoints{
 guint Row, Col;
 GooType* Dat;
 gint RefCount, m_flag : 1;
};
</STRUCT>
<FUNCTION>
<NAME>goo_data_points_new</NAME>
<RETURNS>GooDataPoints * </RETURNS>
guint Rows, guint Columns, GooType* Array 
</FUNCTION>
<FUNCTION>
<NAME>goo_data_points_ref</NAME>
<RETURNS>GooDataPoints * </RETURNS>
GooDataPoints* Points 
</FUNCTION>
<FUNCTION>
<NAME>goo_data_points_unref</NAME>
<RETURNS>void  </RETURNS>
GooDataPoints* Points 
</FUNCTION>
<FUNCTION>
<NAME>goo_data_points_set_point</NAME>
<RETURNS>void  </RETURNS>
GooDataPoints* Points, guint Row, guint Column, GooType Value 
</FUNCTION>
<FUNCTION>
<NAME>goo_data_points_get_point</NAME>
<RETURNS>GooType  </RETURNS>
GooDataPoints* Points, guint Row, guint Column 
</FUNCTION>
<MACRO>
<NAME>GOO_TYPE_DATA_POINTS</NAME>
#define GOO_TYPE_DATA_POINTS (_goo_data_points_get_type())
</MACRO>
<STRUCT>
<NAME>GooFillerValue</NAME>
struct _GooFillerValue{
 gchar* Prop;
 gpointer Value;
};
</STRUCT>
<STRUCT>
<NAME>GooFiller</NAME>
struct _GooFiller{
 GooFillerValue* Values;
 gint RefCount, Entries;
 gchar* Prop(guint Index);
 gpointer Value(guint Index);
};
</STRUCT>
<MACRO>
<NAME>GOO_TYPE_FILLER</NAME>
#define GOO_TYPE_FILLER (_goo_filler_get_type())
</MACRO>
<FUNCTION>
<NAME>goo_filler_new</NAME>
<RETURNS>GooFiller * </RETURNS>
guint Entries 
</FUNCTION>
<FUNCTION>
<NAME>goo_filler_unref</NAME>
<RETURNS>void  </RETURNS>
GooFiller* Filler 
</FUNCTION>
<FUNCTION>
<NAME>goo_filler_ref</NAME>
<RETURNS>GooFiller * </RETURNS>
GooFiller* Filler 
</FUNCTION>
<FUNCTION>
<NAME>goo_filler_set</NAME>
<RETURNS>gboolean  </RETURNS>
GooFiller* Filler, guint Index, gchar* Prop, gpointer Value 
</FUNCTION>
<USER_FUNCTION>
<NAME>goo_palette_function</NAME>
<RETURNS>guint </RETURNS>
gdouble Scale, char Alpha_
</USER_FUNCTION>
<FUNCTION>
<NAME>goo_palette_set_function</NAME>
<RETURNS>void  </RETURNS>
goo_palette_function Func 
</FUNCTION>
<STRUCT>
<NAME>GooSimplecurve2d</NAME>
struct _GooSimplecurve2d{
 GooCanvasPolyline parent_instance;
 GooCanvasItem* Parent;
 GooAxis* AxisX, AxisY;
 GooDataPoints* Dat;
 gint ChX, ChY;
 GooType Bx, By, Bb, Bh;
};
</STRUCT>
<STRUCT>
<NAME>GooSimplecurve2dClass</NAME>
struct _GooSimplecurve2dClass{
 GooCanvasPolylineClass parent_class;
};
</STRUCT>
<MACRO>
<NAME>GOO_TYPE_SIMPLECURVE2D</NAME>
#define GOO_TYPE_SIMPLECURVE2D (_goo_simplecurve2d_get_type())
</MACRO>
<MACRO>
<NAME>GOO_SIMPLECURVE2D</NAME>
#define GOO_SIMPLECURVE2D(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GOO_TYPE_SIMPLECURVE2D, GooSimplecurve2d))
</MACRO>
<MACRO>
<NAME>GOO_IS_SIMPLECURVE2D</NAME>
#define GOO_IS_SIMPLECURVE2D(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GOO_TYPE_SIMPLECURVE2D))
</MACRO>
<MACRO>
<NAME>GOO_SIMPLECURVE2D_CLASS</NAME>
#define GOO_SIMPLECURVE2D_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST((klass), GOO_TYPE_SIMPLECURVE2D, GooSimplecurve2dClass))
</MACRO>
<MACRO>
<NAME>GOO_IS_SIMPLECURVE2D_CLASS</NAME>
#define GOO_IS_SIMPLECURVE2D_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE((klass), GOO_TYPE_SIMPLECURVE2D))
</MACRO>
<MACRO>
<NAME>GOO_SIMPLECURVE2D_GET_CLASS</NAME>
#define GOO_SIMPLECURVE2D_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GOO_TYPE_SIMPLECURVE2D, GooSimplecurve2dClass))
</MACRO>
<FUNCTION>
<NAME>goo_simplecurve2d_new</NAME>
<RETURNS>GooCanvasItem * </RETURNS>
GooCanvasItem* Parent, GooAxis* AxisX, GooAxis* AxisY, GooDataPoints* Dat, guint ChX, guint ChY, ... 
</FUNCTION>
<STRUCT>
<NAME>GooPolax</NAME>
struct _GooPolax{
 GooCanvasGroup parent_instance;
 GooCanvasItem* Parent;
 GooCanvasItem* Textgr, Label, Ticktext;
 GooCanvasItem* Back, Grid, Tick, STick;
 gchar* PSeg, PTxt;
 GooType Bx, By, Bb, Bh;
};
</STRUCT>
<STRUCT>
<NAME>GooPolaxClass</NAME>
struct _GooPolaxClass{
 GooCanvasGroupClass parent_class;
};
</STRUCT>
<MACRO>
<NAME>GOO_TYPE_POLAX</NAME>
#define GOO_TYPE_POLAX (_goo_polax_get_type())
</MACRO>
<MACRO>
<NAME>GOO_POLAX</NAME>
#define GOO_POLAX(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GOO_TYPE_POLAX, GooPolax))
</MACRO>
<MACRO>
<NAME>GOO_IS_POLAX</NAME>
#define GOO_IS_POLAX(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GOO_TYPE_POLAX))
</MACRO>
<MACRO>
<NAME>GOO_POLAX_CLASS</NAME>
#define GOO_POLAX_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST((klass), GOO_TYPE_POLAX, GooPolaxClass))
</MACRO>
<MACRO>
<NAME>GOO_IS_POLAX_CLASS</NAME>
#define GOO_IS_POLAX_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE((klass), GOO_TYPE_POLAX))
</MACRO>
<MACRO>
<NAME>GOO_POLAX_GET_CLASS</NAME>
#define GOO_POLAX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GOO_TYPE_POLAX, GooPolaxClass))
</MACRO>
<FUNCTION>
<NAME>goo_polax_new</NAME>
<RETURNS>GooCanvasItem * </RETURNS>
GooCanvasItem* Parent, GooType X, GooType Y, GooType Width_, GooType Height, gchar* Text, ... 
</FUNCTION>
